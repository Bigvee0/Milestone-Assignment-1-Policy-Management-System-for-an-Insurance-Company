{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "35f7fe5b-9395-4f16-a315-d560210354d5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Checking for 'null' in objects...\n",
      "John Doe registered.\n",
      "Jane Smith registered.\n",
      "John added product 'Health Insurance'.\n",
      "Jane added product 'Health Insurance'.\n",
      "Payment of $500.0 added for John.\n",
      "Payment of $500.0 added for Jane.\n",
      "Payment of $500.0 processed.\n",
      "Payment of $500.0 processed.\n",
      "\n",
      "Policyholder 1 Details:\n",
      "Name: John Doe\n",
      "Email: john.doe@example.com\n",
      "Products: ['Health Insurance']\n",
      "Payments: ['$500.0']\n",
      "\n",
      "Policyholder 2 Details:\n",
      "Name: Jane Smith\n",
      "Email: jane.smith@example.com\n",
      "Products: ['Health Insurance']\n",
      "Payments: ['$500.0']\n",
      "\n",
      "Suspending Policyholder 1:\n",
      "Policyholder John suspended.\n",
      "Reactivating Policyholder 1:\n",
      "Policyholder John reactivated.\n",
      "\n",
      "Updating Product:\n",
      "Product 'Health Insurance' updated.\n",
      "Suspending Product:\n",
      "Product 'Health Insurance' suspended.\n",
      "\n",
      "Payment Reminder:\n",
      "Reminder sent to policyholder.\n",
      "Applying Penalty:\n",
      "Penalty of $50.0 applied. New amount: $350.0.\n"
     ]
    }
   ],
   "source": [
    "# Mock Classes\n",
    "\n",
    "import uuid\n",
    "\n",
    "class Product:\n",
    "    def __init__(self, name, premium, coverage):\n",
    "        self.id = str(uuid.uuid4())\n",
    "        self.name = name\n",
    "        self.premium = premium\n",
    "        self.coverage = coverage\n",
    "        self.active = True\n",
    "\n",
    "    def update(self, premium=None):\n",
    "        if premium:\n",
    "            self.premium = premium\n",
    "        return f\"Product '{self.name}' updated.\"\n",
    "\n",
    "    def suspend(self):\n",
    "        self.active = False\n",
    "        return f\"Product '{self.name}' suspended.\"\n",
    "\n",
    "\n",
    "class Policyholder:\n",
    "    def __init__(self, first_name, last_name, email):\n",
    "        self.id = str(uuid.uuid4())\n",
    "        self.first_name = first_name\n",
    "        self.last_name = last_name\n",
    "        self.email = email\n",
    "        self.products = []\n",
    "        self.payments = []\n",
    "        self.active = True\n",
    "\n",
    "    def register(self):\n",
    "        return f\"{self.first_name} {self.last_name} registered.\"\n",
    "\n",
    "    def add_product(self, product):\n",
    "        self.products.append(product)\n",
    "        return f\"{self.first_name} added product '{product.name}'.\"\n",
    "\n",
    "    def add_payment(self, payment):\n",
    "        self.payments.append(payment)\n",
    "        return f\"Payment of ${payment.amount} added for {self.first_name}.\"\n",
    "\n",
    "    def suspend(self):\n",
    "        self.active = False\n",
    "        return f\"Policyholder {self.first_name} suspended.\"\n",
    "\n",
    "    def reactivate(self):\n",
    "        self.active = True\n",
    "        return f\"Policyholder {self.first_name} reactivated.\"\n",
    "\n",
    "    def get_details(self):\n",
    "        return {\n",
    "            \"Name\": f\"{self.first_name} {self.last_name}\",\n",
    "            \"Email\": self.email,\n",
    "            \"Products\": [p.name for p in self.products],\n",
    "            \"Payments\": [f\"${p.amount}\" for p in self.payments]\n",
    "        }\n",
    "\n",
    "\n",
    "class Payment:\n",
    "    def __init__(self, amount, policyholder_id, product_id):\n",
    "        self.id = str(uuid.uuid4())\n",
    "        self.amount = amount\n",
    "        self.policyholder_id = policyholder_id\n",
    "        self.product_id = product_id\n",
    "        self.status = \"Pending\"\n",
    "\n",
    "    def process_payment(self):\n",
    "        self.status = \"Paid\"\n",
    "        return f\"Payment of ${self.amount} processed.\"\n",
    "\n",
    "    def send_reminder(self):\n",
    "        return \"Reminder sent to policyholder.\"\n",
    "\n",
    "    def apply_penalty(self, amount):\n",
    "        self.amount += amount\n",
    "        return f\"Penalty of ${amount} applied. New amount: ${self.amount}.\"\n",
    "\n",
    "# Diagnostic function\n",
    "def check_for_null(obj, obj_name):\n",
    "    for attr, value in vars(obj).items():\n",
    "        if value == \"null\":  # Corrected check\n",
    "            print(f\"Warning: Found 'null' in {obj_name}.{attr}. Should be 'None'.\")\n",
    "            return False\n",
    "    return True\n",
    "\n",
    "# Main demo\n",
    "def demonstrate_system():\n",
    "    health_insurance = Product(name=\"Health Insurance\", premium=500.00, coverage=\"Medical coverage up to $100,000\")\n",
    "    auto_insurance = Product(name=\"Auto Insurance\", premium=300.00, coverage=\"Vehicle coverage up to $50,000\")\n",
    "\n",
    "    policyholder1 = Policyholder(\"John\", \"Doe\", \"john.doe@example.com\")\n",
    "    policyholder2 = Policyholder(\"Jane\", \"Smith\", \"jane.smith@example.com\")\n",
    "\n",
    "    print(\"Checking for 'null' in objects...\")\n",
    "    for obj, name in [(policyholder1, \"policyholder1\"), (policyholder2, \"policyholder2\"), \n",
    "                      (health_insurance, \"health_insurance\"), (auto_insurance, \"auto_insurance\")]:\n",
    "        if not check_for_null(obj, name):\n",
    "            print(f\"Error: 'null' found in {name}. Please replace with 'None' and rerun.\")\n",
    "            return\n",
    "\n",
    "    print(policyholder1.register())\n",
    "    print(policyholder2.register())\n",
    "\n",
    "    print(policyholder1.add_product(health_insurance))\n",
    "    print(policyholder2.add_product(health_insurance))\n",
    "\n",
    "    payment1 = Payment(amount=health_insurance.premium, policyholder_id=policyholder1.id, product_id=health_insurance.id)\n",
    "    payment2 = Payment(amount=health_insurance.premium, policyholder_id=policyholder2.id, product_id=health_insurance.id)\n",
    "\n",
    "    if not check_for_null(payment1, \"payment1\") or not check_for_null(payment2, \"payment2\"):\n",
    "        print(\"Error: 'null' found in payment objects. Please replace with 'None' and rerun.\")\n",
    "        return\n",
    "\n",
    "    print(policyholder1.add_payment(payment1))\n",
    "    print(policyholder2.add_payment(payment2))\n",
    "    print(payment1.process_payment())\n",
    "    print(payment2.process_payment())\n",
    "\n",
    "    print(\"\\nPolicyholder 1 Details:\")\n",
    "    for key, value in policyholder1.get_details().items():\n",
    "        print(f\"{key}: {value}\")\n",
    "\n",
    "    print(\"\\nPolicyholder 2 Details:\")\n",
    "    for key, value in policyholder2.get_details().items():\n",
    "        print(f\"{key}: {value}\")\n",
    "\n",
    "    print(\"\\nSuspending Policyholder 1:\")\n",
    "    print(policyholder1.suspend())\n",
    "    print(\"Reactivating Policyholder 1:\")\n",
    "    print(policyholder1.reactivate())\n",
    "\n",
    "    print(\"\\nUpdating Product:\")\n",
    "    print(health_insurance.update(premium=550.00))\n",
    "    print(\"Suspending Product:\")\n",
    "    print(health_insurance.suspend())\n",
    "\n",
    "    payment3 = Payment(amount=auto_insurance.premium, policyholder_id=policyholder1.id, product_id=auto_insurance.id)\n",
    "    if not check_for_null(payment3, \"payment3\"):\n",
    "        print(\"Error: 'null' found in payment3. Please replace with 'None' and rerun.\")\n",
    "        return\n",
    "    print(\"\\nPayment Reminder:\")\n",
    "    print(payment3.send_reminder())\n",
    "    print(\"Applying Penalty:\")\n",
    "    print(payment3.apply_penalty(50.00))\n",
    "\n",
    "# Run the demo\n",
    "demonstrate_system()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "29814164-f1b2-4f50-8eab-9a84b97e807f",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
